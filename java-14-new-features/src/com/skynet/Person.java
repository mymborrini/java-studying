package com.skynet;

import java.util.Objects;

// If all the instances of this class are immutable is pretty useless use a class
// it's way better to use a record
// The record is equivalent of this PersonClass
class PersonClass {

    private final String name;
    private final String address;

    public PersonClass(String name, String address) {
        this.name = name;
        this.address = address;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        PersonClass person = (PersonClass) o;

        if (!Objects.equals(name, person.name)) return false;
        return Objects.equals(address, person.address);
    }

    @Override
    public int hashCode() {
        int result = name != null ? name.hashCode() : 0;
        result = 31 * result + (address != null ? address.hashCode() : 0);
        return result;
    }

    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", address='" + address + '\'' +
                '}';
    }

    public String getName() {
        return name;
    }

    public String getAddress() {
        return address;
    }
};

// The equals, hashCode, and toString methods, as well as the private, final fields, and public constructor,
// are generated by the Java compiler.
// public getters methods – whose names match the name of our field – for free.
public record Person (String name, String address){

    // Custom constructor
    public Person(String name){
        this(name, "unknown");
    }

    // A custom constructor which is identical to the one by default has to be initialized with all the fields
    public Person(String name, String address){
        this.name = name;
        this.address = address;
    }

    // we can also create static variables and methods
    public static String UNKNOWN_ADDRESS = "Unknown";

    public static Person unnamed(String address){
        return new Person("Unnamed", address);
    }


};